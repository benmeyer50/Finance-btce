#!/usr/bin/perl

# Copyright (c) 2013 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Term::ReadLine;

use Finance::btce ':all';

my ($apikey, $secret);

my $configfile = $ENV{'HOME'}."/.btce.conf";
if (-f $configfile) {
	open(CONFIG, $configfile);
	while(<CONFIG>) {
		my $line;
		chomp($line = $_);
		if ($line =~ /^([a-z]+)\s*=\s*(.*)$/) {
			my ($var,$val) = ($1,$2);
			if ($var eq "apikey") {
				$apikey = $val;
			} elsif ($var eq "secret") {
				$secret = $val;
			} else {
				printf STDERR "Unrecognized: '%s' = '%s'\n",
				    $var, $val;
			}
		}
	}
	close(CONFIG);
}

if (!defined($apikey) || !defined($secret)) {
	printf STDERR "Either apikey or secret undefined, bailing\n";
}

my $btce = Finance::btce->new( { apikey => $apikey, secret => $secret, });

sub
act
{
	my (@argv) = @_;
	my %result;
	my @resultkeys;
	my $res;
	if ($argv[0] eq "getinfo") {
		$res = $btce->getInfo();
	} elsif ($argv[0] eq "quit") {
		exit(0);
	} elsif ($argv[0] eq "ex" && defined($argv[1])) {
		$res = BtceConversion($argv[1]);
		@resultkeys = ('updated', 'last', 'avg', 'high', 'low',
		    'buy', 'sell' );
	} elsif ($argv[0] eq "fee" && defined($argv[1])) {
		$res = BtceFee($argv[1]);
	} elsif ($argv[0] eq "trades" && defined($argv[1])) {
		$res = BtceTrades($argv[1]);
	} elsif ($argv[0] eq "depth" && defined($argv[1])) {
		$res = BtceDepth($argv[1]);
	} elsif ($argv[0] eq "history") {
		$res = $btce->TradeHistory();
	} elsif ($argv[0] eq "activeorders") {
		$res = $btce->ActiveOrders($argv[1]);
	} elsif ($argv[0] eq "trade") {
		my $args;
		${$args}{'pair'} = $argv[1];
		${$args}{'type'} = $argv[2];
		${$args}{'rate'} = $argv[3];
		${$args}{'amount'} = $argv[4];
		$res = $btce->Trade($args);
	} elsif ($argv[0] eq "cancel" && defined($argv[1])) {
		$res = $btce->CancelOrder($argv[1]);
	} else {
		printf STDERR "Invalid method: %s, bailing!\n", $argv[0];
		exit(1);
	}

	if (ref($res) eq "HASH") {
		if (! @resultkeys) {
			@resultkeys = keys %{$res};
		}
	foreach my $var (@resultkeys)
	{
		my $val = ${$res}{$var};
		printf " %s = ", $var;
		unless (ref($val)) {
			printf "%s\n", $val;
			next;
		}
		if (ref($val) eq "HASH") {
			print "HASH {\n";
			my $keyfmt = "'%s'";
			my @keys = keys %{$val};
			my @sortedkeys = @keys;
			if ($argv[0] =~ /^(history|activeorders)/) {
				@sortedkeys = sort @keys;
				$keyfmt = "%d";
			}
			foreach my $k (@sortedkeys) {
				my $v = ${$val}{$k};
				printf "\t".$keyfmt." => ",$k;
				unless (ref($v)) {
					printf "'%s',\n",$v;
					next;
				}
				if (ref($v) eq "HASH") {
					print "HASH {\n";
					my $valfmt = "'%s'";
					if ($k eq "funds") {
						$valfmt = "%0.8f";
					}
					foreach my $l (keys %{$v}) {
						# temp value format
						my $tvf = $valfmt;
						printf "\t\t'%s' => ",$l;
						if ($l =~ /rate|amount/) {
							$tvf = "%0.8f";
						} elsif ($l =~ /timestamp|order_id/) {
							$tvf = "%d";
						}
						printf $tvf.",\n", ${$v}{$l};
					}
					print "\t},\n";
					next;
				}
				print "\t".ref($val)." {...},\n";
			}
			print "},\n";
			next;
		}
		if (ref($val) eq "ARRAY") {
			
				
			print "ARRAY (\n";
			foreach my $k (@{$val}) {
				unless (ref($val)) {
					printf "\t'%s',\n", $k;
					next;
				}
				if (ref($k) eq "ARRAY") {
					print "\tARRAY (\n";
					foreach my $l (@{$k}) {
						printf "\t\t'%s',\n",$l;
					}
					print "\t),\n";
				}
			}
			print ")\n";
			next;
		}
		print ref($val)." {...},\n";
	}
	} elsif (ref($res) eq "ARRAY") {
		print " ARRAY (\n";
		foreach my $var (@{$res}) {
			unless (ref($var)) {
				printf "\t%s\n", $var;
				next;
			}
			if (ref($var) eq "HASH") {
				print "\tHASH {\n";
				foreach my $k (keys %{$var}) {
					my $v = ${$var}{$k};
					printf "\t\t'%s' = ",$k;
					unless (ref($v)) {
						printf "'%s',\n", $v;
						next;
					}
					print ref($v)." ...,\n";
					next;
				
				}
				print "\t},\n";
				next;
			}
			print ref($var)." ...,\n";
			next;
		}
		print ")\n";
	}
}

if (@ARGV) {
	act( @ARGV );
	exit(0);
}

my $term = Term::ReadLine->new('btc-e', *STDIN, *STDOUT);
$term->ornaments(0);

my $prompt = "btc-e> ";
my $line;
while (1)
{
	chomp($line = $term->readline($prompt));
	if (!defined($line)) {
		exit(0);
	}
	act( split(/[ ]+/,$line) );
}
